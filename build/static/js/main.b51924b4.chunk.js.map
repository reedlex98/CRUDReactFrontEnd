{"version":3,"sources":["assets/imgs/logo.png","components/template/Header.jsx","components/template/Main.jsx","components/home/Home.jsx","components/user/userCrud.jsx","main/Routes.jsx","components/template/Logo.jsx","components/template/Nav-item.jsx","components/template/Nav.jsx","components/template/Footer.jsx","serviceWorker.js","index.js","main/App.jsx"],"names":["module","exports","__webpack_require__","p","template_Header","props","react_default","a","createElement","className","concat","icon","title","subtitle","template_Main","Fragment","children","Home","headerProps","baseUrl","initialState","user","name","email","list","UserCrud","state","_this2","this","axios","then","resp","setState","data","_this3","method","id","url","getUpdatedList","add","arguments","length","undefined","filter","u","unshift","event","Object","objectSpread","target","value","_this4","delete","renderRows","_this5","map","key","onClick","load","remove","_this6","htmlFor","type","onChange","e","updateField","placeholder","save","clear","console","log","renderForm","renderTable","Component","Routes","es","exact","path","component","from","to","template_Logo","react_router_dom_es","src","logo","alt","Nav_item","hash","template_Nav","template_Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b51924b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6777486e.png\";","import './Header.css'\nimport React from 'react'\n\nexport default props => <header className=\"header d-none d-sm-flex flex-column\">\n    <h1 className=\"mt-3\">\n        <i className={`fa fa-${props.icon}`}></i> {props.title}\n    </h1>\n    <p className=\"lead text-muted\">{props.subtitle}</p>\n</header>","import './Main.css'\nimport Header from './Header'\nimport React from 'react'\n\nexport default props =>\n    <React.Fragment>\n        <Header {...props}/>\n        <main className=\"content container-fluid\">\n            <div className=\"p-3 mt-3\">\n                {props.children}\n            </div>\n        </main>\n    </React.Fragment>\n","import React from 'react'\nimport Main from '../template/Main'\n\nexport default props =>\n    <Main icon=\"home\" title=\"Home\"\n        subtitle=\"Second project, React Course\">\n        <div className=\"display-4\">Welcome</div>\n        <hr />\n        <p className=\"mb-0\">\n            It's a system made to exemplify the building process of a register CRUD app developed using React\n    </p>\n    </Main>\n","import React, { Component } from 'react'\nimport Main from '../template/Main'\nimport axios from 'axios'\n\nconst headerProps = {\n    icon: 'users',\n    title: 'Users',\n    subtitle: 'Users register: Inserting, Listing, Update and Deletion'\n}\n\nconst baseUrl = 'http://localhost:3001/users'\nconst initialState ={\n    user:{\n        name: '',\n        email:''\n    },\n    list:[]\n}\n\nexport default class UserCrud extends Component {\n    state = {...initialState}\n\n    componentWillMount(){\n        axios(baseUrl)\n            .then(resp=>\n                this.setState({list:resp.data}))\n    }\n\n    clear(){\n        this.setState({ user: initialState.user })\n    }\n\n    save(){\n        //to include a new information I have to use HTTP Post method\n        //to alter/update an existing information I ve to use HTTP Put/Patch method\n        const user = this.state.user\n        const method = user.id ? 'put' : 'post'\n        const url = user.id ? `${baseUrl}/${user.id}` : baseUrl\n        axios[method](url, user)\n            .then(resp =>{\n                const list = this.getUpdatedList(resp.data)\n                this.setState({ user: initialState, list})\n            })\n    }\n\n    getUpdatedList(user, add=true){\n        const list = this.state.list.filter(u => u.id !== user.id)\n        if(add) list.unshift(user)\n        return list\n    }\n\n    updateField(event){\n        const user = { ...this.state.user }\n        user[event.target.name] = event.target.value\n        this.setState({user})\n    }\n\n    load(user){\n        this.setState({user})\n    }\n\n    remove(user){\n        axios.delete(`${baseUrl}/${user.id}`)\n            .then(resp =>{\n                const list = this.getUpdatedList(user, false)\n                this.setState({list})\n            })\n    }\n\n    renderTable(){\n        return (\n            <table className=\"table mt-4\">\n                <thead>\n                    <tr>\n                        <th>Id</th>\n                        <th>Name</th>\n                        <th>E-mail</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.renderRows()}\n                </tbody>\n            </table>\n        )\n    }\n\n    renderRows(user){\n        return this.state.list.map(user => {\n            return (\n                <tr key={user.id}>\n                    <td>{user.id}</td>\n                    <td>{user.name}</td>\n                    <td>{user.email}</td>\n                    <td>\n                        <button className=\"btn btn-warning\" onClick={() => this.load(user)}>\n                            <i className=\"fa fa-pencil\"></i>\n                        </button>\n                        <button className=\"btn btn-danger ml-2\" onClick={() => this.remove(user)}>\n                            <i className=\"fa fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            )\n        })\n    }\n\n    renderForm(){ // change this part into separated components\n        return (\n            <div className=\"form\">\n                <div className=\"row\">\n                    <div className=\"col-12 col-md-6\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\n                            \">Name</label>\n                            <input type=\"text\" className=\"form-control\" name=\"name\"\n                            value={this.state.user.name}\n                            onChange={e => this.updateField(e)}\n                            placeholder=\"Type your name...\"/>\n                        </div>\n                    </div>\n                    <div className=\"col-12 col-md-6\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">E-mail</label>\n                            <input type=\"email\" className=\"form-control\" name=\"email\"\n                            value={this.state.user.email}\n                            onChange={e => this.updateField(e)}\n                            placeholder=\"Type your e-mail address...\"/>\n                        </div>\n                    </div>\n                </div>\n                <hr/>\n                <div className=\"row\">\n                    <div className=\"col-12 d-flex justify-content-end\">\n                        <button className=\"btn btn-primary\" onClick={e=> this.save(e)}>\n                            Save\n                        </button>\n                        <button className=\"btn btn-secondary ml-2\" onClick={e => this.clear(e)}>\n                            Calcel\n                        </button>\n                    </div>\n                </div>\n            </div>\n        )\n    }   \n\n    render() {\n        console.log(this.state.list)\n        return (\n            <Main {...headerProps}>\n                <div>\n                    {this.renderForm()}\n                    {this.renderTable()}\n                </div>\n            </Main>\n        )\n    }\n}","import React from 'react'\nimport { Switch, Route, Redirect } from 'react-router'\n\nimport Home from '../components/home/Home'\nimport UserCrud from '../components/user/userCrud'\n\nexport default props => \n    <Switch>\n        <Route exact path='/' component={Home}/>\n        <Route path='/users' component={UserCrud}/>\n        <Redirect from='*' to='/'/>\n    </Switch> ","import './Logo.css'\nimport React from 'react'\nimport logo from '../../assets/imgs/logo.png'\nimport { Link } from 'react-router-dom'\n\nexport default props => {\n    return <aside className=\"logo\">\n        <Link to=\"/\" className=\"logo\">\n            <img src={logo} alt=\"logo\" />\n        </Link>\n    </aside>\n}","import './Nav.css'\nimport React from 'react'\nimport {Link} from 'react-router-dom'\n\nexport default props => {\n    return (\n        <Link to={`/${props.hash}`}>\n            <i className={`fa fa-${props.icon}`}></i> {`${props.name}`}\n        </Link>\n    )\n}","import './Nav.css'\nimport React from 'react'\nimport NavItem from './Nav-item'\n\nexport default props =>\n    <aside className=\"menu-area\">\n        <nav className=\"menu\">\n            <NavItem hash=\"\" icon=\"home\" name=\"Home\"/>\n            <NavItem hash=\"users\" icon=\"users\" name=\"Users\"/>\n        </nav>\n    </aside>","import './Footer.css'\nimport React from 'react'\n\nexport default props => \n    <footer className=\"footer\">\n        <span>\n            Desenvolvido com <i className=\"fa fa-heart text-danger\"></i> por <strong>Reedlex98</strong>\n        </span>\n    </footer>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport './App.css'\n\nimport Routes from './Routes'\nimport Logo from '../components/template/Logo'\nimport Nav from '../components/template/Nav'\nimport Footer from '../components/template/Footer'\n\nimport React from 'react'\nimport { HashRouter } from 'react-router-dom' // Nesse caso, podem ser usados tanto o BrowserRouter quanto o HashRouter. Entretanto, o BrowserRouter pode vir a dar alguns problemas após o deploy\n\nexport default props =>\n    <HashRouter>\n        <div className=\"app\">\n            <Logo />\n            <Nav />\n            <Routes/>\n            <Footer />\n        </div>\n    </HashRouter>"],"sourceRoot":""}